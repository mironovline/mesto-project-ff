{"version":3,"file":"main.js","mappings":"mBAAO,ICIDA,EAAeC,SAASC,cAAc,kBAAkBC,QAGxDC,EAAWH,SAASC,cAAc,iBAmBlCG,EAAa,SAAUC,GAC3BA,EAAKC,QACP,EAGMC,EAAW,SAAUF,GACzBA,EAAKG,UAAUC,IAAI,qBACnBJ,EAAKG,UAAUC,IAAI,8BAErB,EDnC4B,CACxB,CACEC,KAAM,QACNC,KAAM,iFAER,CACED,KAAM,sBACNC,KAAM,6FAER,CACED,KAAM,UACNC,KAAM,kFAER,CACED,KAAM,WACNC,KAAM,oFAER,CACED,KAAM,qBACNC,KAAM,6FAER,CACED,KAAM,SACNC,KAAM,kFCeCC,SAAQ,SAACC,GACpB,IAAMR,EA7BQ,SAAUQ,EAASC,EAAoBC,GACrD,IAAMV,EAAON,EAAaE,cAAc,SAASe,WAAU,GACrDC,EAAYZ,EAAKJ,cAAc,gBAC/BiB,EAAiBb,EAAKJ,cAAc,sBAQ1C,OAPAgB,EAAUE,IAAMN,EAAQF,KACxBM,EAAUG,IAAMP,EAAQH,KACNL,EAAKJ,cAAc,gBAC3BoB,YAAcR,EAAQH,KACXL,EAAKJ,cAAc,wBAC3BqB,iBAAiB,SAAS,kBAAMR,EAAmBT,EAAK,IACrEa,EAAeI,iBAAiB,SAAS,kBAAMP,EAAiBV,EAAK,IAC9DA,CAET,CAgBekB,CAAQV,EAAST,EAAYG,GAC1CJ,EAASqB,OAAOnB,EAElB,IAEA,IAAMoB,EAAmBzB,SAASC,cAAc,oBAC1CyB,EAAe1B,SAASC,cAAc,wBACtC0B,EAAa3B,SAASC,cAAc,qBACpC2B,EAAQ5B,SAASC,cAAc,iBAE/B4B,EAAa7B,SAASC,cAAc,yBACpC6B,EAAY9B,SAASC,cAAc,wBAEnC8B,EAAc/B,SAASC,cAAc,gBACrC+B,EAAYD,EAAY9B,cAAc,2BACtCgC,EAAWF,EAAY9B,cAAc,kCAErCiC,EAAiB,SAACC,GACtB,GAAc,WAAVA,EAAEC,IAAkB,CACtB,IAAMC,EAAQrC,SAASC,cAAc,oBACrCqC,EAAWD,EACb,CACF,EAEME,EAAY,SAAUC,GACxBA,EAAMhC,UAAUC,IAAI,mBACpBT,SAASsB,iBAAiB,QAASY,EACvC,EAEMI,EAAa,SAAUE,GAC5BA,EAAMhC,UAAUF,OAAO,mBACvBN,SAASyC,oBAAoB,QAASP,EACvC,EAiBAH,EAAYT,iBAAiB,UAd7B,SAA0BoB,GAClBA,EAAIC,iBACJ,IAAMjC,EAAOsB,EAAUY,MACjBC,EAAMZ,EAASW,MACA5C,SAASC,cAAc,mBAC/BoB,YAAcX,EACAV,SAASC,cAAc,yBAC/BoB,YAAcwB,CAKzC,IAKAhB,EAAWP,iBAAiB,SAAS,WACjCiB,EAAUd,EACd,IACAK,EAAUR,iBAAiB,SAAS,WAChCiB,EAAUb,EACd,IAEAE,EAAMN,iBAAiB,SAAS,WAC5BiB,EAAUZ,EACd,IAEA,IAAMmB,EAAe,SAAUC,GACPA,EAAa9C,cAAc,iBACnCqB,iBAAiB,SAAS,WAAOgB,EAAWS,EAAa,GACzE,EACAD,EAAarB,GACbqB,EAAapB,GACboB,EAAanB,E","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    }\r\n];","import './pages/index.css';\r\nimport { initialCards } from './scripts/cards.js';\r\n\r\n// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector('#card-template').content;    //в переменную cardTemplate записали содержимое шаблона\r\n\r\n// @todo: DOM узлы\r\nconst cardList = document.querySelector('.places__list');                 //это куда будем вставлять карточки\r\n\r\n// @todo: Функция создания карточки\r\nconst addCard = function (element, removeCardCallback, likeCardCallback, openPopupImageCallback) {             //функция принимает элемент (объект) из массива объектов исходных данных карточек\r\n  const card = cardTemplate.querySelector('.card').cloneNode(true);       //клонируем шаблон карточки, помещаем его в переменную card, далее будем наполнять\r\n  const cardImage = card.querySelector('.card__image');\r\n  const cardLikeButton = card.querySelector('.card__like-button');                   //выбираем внутри спарсенного шаблона карточки изображение\r\n  cardImage.src = element.link;                                           //выбираем ключ 'link' у объекта из массива исходных карточек и присваиваем его атрибуту 'src' у выбранного ранее изображения\r\n  cardImage.alt = element.name;                                           //выбираем ключ 'name' у объекта из массива исходных карточек и присваиваем его атрибуту 'alt' у выбранного ранее изображения (иного описания изображения нам не дано)\r\n  const cardTitle = card.querySelector('.card__title');                   //выбираем заголовок внутри спарсенного шаблона карточки\r\n  cardTitle.textContent = element.name;                                   //выбираем ключ 'name' у объекта из массива исходных карточек и присваиваем его атрибуту 'src' у выбранного ранее изображения\r\n  const removeButton = card.querySelector('.card__delete-button');        //выбираем кнопку внутри спарсенного шаблона карточки и записываем ее как объект в переменную removeButton\r\n  removeButton.addEventListener('click', () => removeCardCallback(card)); //вешаем на кнопку слушатель событий, который по клику запускает функцию удаления карточки\r\n  cardLikeButton.addEventListener('click', () => likeCardCallback(card));            \r\n  return card;\r\n                                                                        //функция возвращает наполненную карточку\r\n};\r\n\r\n// @todo: Функция удаления карточки\r\nconst removeCard = function (card) {                                      //функция удаления карточки принимает карточку в качестве аргумента\r\n  card.remove();                                                          //удаляем карточку\r\n};\r\n\r\n// @todo: Функция лайка карточки\r\nconst likeCard = function (card) {\r\n  card.classList.add('card__like-button');\r\n  card.classList.add('card__like-button_is-active');\r\n\r\n}\r\n\r\n// @todo: Вывести карточки на страницу\r\ninitialCards.forEach((element) => {                                       //цикл идет по массиву initialCards, на каждой итерации берет объект element из этого массива\r\n  const card = addCard(element, removeCard, likeCard);                              //вызываем функцию addCard и передаем ей объект element из массива исходных карточек и колбек удаления карточек и присваиваем результат ее выполнения переменной card\r\n  cardList.append(card);\r\n                                                    //добавляем в конец cardList полученную card\r\n});\r\n\r\nconst popupProfileEdit = document.querySelector('.popup_type_edit');\r\nconst popupCardAdd = document.querySelector('.popup_type_new-card');\r\nconst popupImage = document.querySelector('.popup_type_image');\r\nconst cards = document.querySelector('.places__list');\r\n\r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\n\r\nconst formElement = document.querySelector('.popup__form');\r\nconst nameInput = formElement.querySelector('.popup__input_type_name');\r\nconst jobInput = formElement.querySelector('.popup__input_type_description');\r\n\r\nconst handleEscKeyUp = (e) => {\r\n  if (e.key === \"Escape\") {\r\n    const popup = document.querySelector(\".popup_is-opened\"); // находим открытый попап\r\n    closeModal(popup);\r\n  }\r\n};\r\n\r\nconst openModal = function (modal) {\r\n    modal.classList.add('popup_is-opened');\r\n    document.addEventListener('keyup', handleEscKeyUp);\r\n};\r\n\r\nconst closeModal = function (modal) {\r\n modal.classList.remove('popup_is-opened');\r\n document.removeEventListener('keyup', handleEscKeyUp);\r\n};\r\n\r\n\r\nfunction handleFormSubmit(evt) {\r\n        evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.    \r\n        const name = nameInput.value;\r\n        const job = jobInput.value;           // Получите значение полей jobInput и nameInput из свойства value\r\n        const profileTitle = document.querySelector('.profile__title');\r\n        profileTitle.textContent = name;\r\n        const profileDescription = document.querySelector('.profile__description');\r\n        profileDescription.textContent = job;\r\n\r\n    // Выберите элементы, куда должны быть вставлены значения полей\r\n\r\n    // Вставьте новые значения с помощью textContent\r\n}\r\n\r\nformElement.addEventListener('submit', handleFormSubmit);\r\n\r\n\r\neditButton.addEventListener('click', () => {\r\n    openModal(popupProfileEdit);\r\n});\r\naddButton.addEventListener('click', () => {\r\n    openModal(popupCardAdd);\r\n});\r\n\r\ncards.addEventListener('click', () => {\r\n    openModal(popupImage);\r\n});\r\n\r\nconst addListeners = function (popupElement) {\r\n    const closeButton = popupElement.querySelector('.popup__close');\r\n    closeButton.addEventListener('click', () => {closeModal(popupElement)});\r\n}\r\naddListeners(popupProfileEdit);\r\naddListeners(popupCardAdd);\r\naddListeners(popupImage);\r\n"],"names":["cardTemplate","document","querySelector","content","cardList","removeCard","card","remove","likeCard","classList","add","name","link","forEach","element","removeCardCallback","likeCardCallback","cloneNode","cardImage","cardLikeButton","src","alt","textContent","addEventListener","addCard","append","popupProfileEdit","popupCardAdd","popupImage","cards","editButton","addButton","formElement","nameInput","jobInput","handleEscKeyUp","e","key","popup","closeModal","openModal","modal","removeEventListener","evt","preventDefault","value","job","addListeners","popupElement"],"sourceRoot":""}